name: Java CI with Docker and ECR

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Java 11 and make it available in the pipeline
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'adopt'

      - name: Verify Java Version
        run: |
          java -version  # Verify that Java 11 is being used

      # Build the project with Maven using Java 11
      - name: Build with Maven
        run: mvn clean install

      # Run tests with Maven
      - name: Run tests
        run: mvn test

      # Run Checkstyle Linting
      - name: Run Checkstyle Linting
        run: mvn checkstyle:check

      # Install SonarScanner and configure it to use Java 11
      - name: Install SonarScanner
        run: |
          curl -sSLo sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner-cli.zip -d $HOME
          export PATH="$HOME/sonar-scanner-4.8.0.2856-linux/bin:$PATH"

      # Verify SonarScanner Installation
      - name: Verify SonarScanner Installation
        run: |
          sonar-scanner --version

      # Run SonarCloud Analysis
      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=Infotrend-Inc_COMET-JAVA \
            -Dsonar.organization=Infotrend-Inc \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: ecr_login
        uses: aws-actions/amazon-ecr-login@v1

      # Increment Version
      - name: Increment Version
        id: increment_version
        run: |
          if [ ! -f VERSION ]; then
            echo "1.0.0" > VERSION
          else
            current_version=$(cat VERSION)
            IFS='.' read -r -a parts <<< "$current_version"
            major=${parts[0]}
            minor=${parts[1]}
            patch=${parts[2]}
            patch=$((patch + 1))
            new_version="$major.$minor.$patch"
            echo "$new_version" > VERSION
          fi
          echo "version=$(cat VERSION)" >> $GITHUB_ENV

      # Display New Version
      - name: Display New Version
        run: echo "New version is ${{ env.version }}"

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/comet-app-repo:${{ env.version }} .

      # Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/comet-app-repo:${{ env.version }}

      # Commit updated version to the repository
      - name: Commit updated version
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: Bump version to ${{ env.version }}"
          file_pattern: VERSION
